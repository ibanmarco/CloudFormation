AWSTemplateFormatVersion: '2010-09-09'
Description: "VPC and network stack"
# No required:
#   Metadata: {}
#   Mappings: {}
#   Conditions: {}
#   Outputs: {}
Parameters:
  IPv4VPCCidrBlock:
    Description: VPC CIDR Block (eg 10.0 and 10.0.0.0/16 will be created)
    Default: "10.1"
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})"
Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Join ["", [!Ref IPv4VPCCidrBlock, ".0.0/16"]]  # Adding 3rd and 4th octect plus mask
      EnableDnsSupport: True
      EnableDnsHostnames: True
      Tags:
      - Key: Name
        Value: !Ref "AWS::StackName"
      - Key: Env
        Value: Testing
  # Subnets creation
  SubnetPublic01:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Join [ "", [!Ref IPv4VPCCidrBlock, ".0.0/24"]] # By default 10.1.0.0/24
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Join [" - ", [Public01, {"Fn::Select" : [ "0", {"Fn::GetAZs" : ""}]}, {Ref: 'AWS::StackName'}]]
      - Key: Env
        Value: Testing
      VpcId: !Ref VPC
  SubnetPublic02:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Join [ "", [!Ref IPv4VPCCidrBlock, ".3.0/24"]] # By default 10.1.3.0/24
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Join [" - ", [Public02, {"Fn::Select" : [ "1", {"Fn::GetAZs" : ""}]}, {Ref: 'AWS::StackName'}]]
      - Key: Env
        Value: Testing
      VpcId: !Ref VPC
  SubnetPrivate01:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Join [ "", [!Ref IPv4VPCCidrBlock, ".1.0/24"]] # By default 10.1.1.0/24
      MapPublicIpOnLaunch: false  # By default the value is false, can be omited
      Tags:
      - Key: Name
        Value: !Join [" - ", [Private01, {"Fn::Select" : [ "0", {"Fn::GetAZs" : ""}]}, {Ref: 'AWS::StackName'}]]
      - Key: Env
        Value: Testing
      VpcId: !Ref VPC
  SubnetPrivate02:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Join [ "", [!Ref IPv4VPCCidrBlock, ".4.0/24"]] # By default 10.1.4.0/24
      MapPublicIpOnLaunch: false  # By default the value is false, can be omited
      Tags:
      - Key: Name
        Value: !Join [" - ", [Private02, {"Fn::Select" : [ "1", {"Fn::GetAZs" : ""}]}, {Ref: 'AWS::StackName'}]]
      - Key: Env
        Value: Testing
      VpcId: !Ref VPC
  SubnetDB01:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Join [ "", [!Ref IPv4VPCCidrBlock, ".2.0/24"]] # By default 10.1.2.0/24
      MapPublicIpOnLaunch: false  # By default the value is false, can be omited
      Tags:
      - Key: Name
        Value: !Join [" - ", [DB01, {"Fn::Select" : [ "0", {"Fn::GetAZs" : ""}]}, {Ref: 'AWS::StackName'}]]
      - Key: Env
        Value: Testing
      VpcId: !Ref VPC
  SubnetDB02:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Join [ "", [!Ref IPv4VPCCidrBlock, ".5.0/24"]] # By default 10.1.5.0/24
      MapPublicIpOnLaunch: false  # By default the value is false, can be omited
      Tags:
      - Key: Name
        Value: !Join [" - ", [DB02, {"Fn::Select" : [ "1", {"Fn::GetAZs" : ""}]}, {Ref: 'AWS::StackName'}]]
      - Key: Env
        Value: Testing
      VpcId: !Ref VPC
  # NatGW, first public subnet (AZ1) assigment plus EIP
  NatGW:
    Type: "AWS::EC2::NatGateway"
    DependsOn: IGWattachment
    Properties:
      AllocationId: !GetAtt ElasticIPNatGW.AllocationId
      SubnetId: !Ref SubnetPublic01
  ElasticIPNatGW:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc
  # IGW creation and attach to VPC
  InternetGW:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  IGWattachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGW
      VpcId: !Ref VPC
  # RTs creation and 0/0 assigment to each RT (dependencies: IGW & NatGW)
  PublicRT:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [" - ", [PublicRT, {Ref: 'AWS::StackName'}]]
  PrivateRT:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [" - ", [PublicRT, {Ref: 'AWS::StackName'}]]
  PublicRTDefGW:
    Type: "AWS::EC2::Route"
    DependsOn: IGWattachment
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0 
      GatewayId: !Ref InternetGW
      RouteTableId: !Ref PublicRT 
  # Subnets association with the correct RT
  PubSubnet01Assoc:  
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRT
      SubnetId: !Ref SubnetPublic01
  PubSubnet02Assoc:  
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRT
      SubnetId: !Ref SubnetPublic02
  PrivateRTDefGW:
    Type: "AWS::EC2::Route"
    DependsOn: NatGW
    Properties:
      RouteTableId: !Ref PrivateRT 
      DestinationCidrBlock: 0.0.0.0/0 
      NatGatewayId: !Ref NatGW
